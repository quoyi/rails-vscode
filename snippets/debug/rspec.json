{
  "describe-context-it": {
    "prefix": "dci",
    "body": [
      "describe '${1:something to be performed}' do",
      "",
      "\tcontext '${2:condition}' do",
      "",
      "\t\tit '${3:behaves like}' do",
      "\t\t\t$0",
      "\t\tend",
      "",
      "\tend",
      "",
      "end"
    ],
    "description": "RSpec Describe + Context + It Block"
  },
  "context": {
    "prefix": "context",
    "body": [
      "context '${1:context}' do",
      "\t$0",
      "end"
    ],
    "description": "RSpec Context Block"
  },
  "subject": {
    "prefix": "subject",
    "body": "subject { ${1:page} } ",
    "description": "RSpec Subject"
  },
  "it-block": {
    "prefix": "it",
    "body": [
      "it '${1:description}' do",
      "\t$0",
      "end"
    ],
    "description": "RSpec It Block"
  },
  "before-block": {
    "prefix": "before-block",
    "body": [
      "before do",
      "\t$0",
      "end"
    ],
    "description": "RSpec Before Block"
  },
  "before-inline": {
    "prefix": "before-inline",
    "body": "before { $0 } ",
    "description": "RSpec Before Inline"
  },
  "let": {
    "prefix": "let",
    "body": "let(:${1:var}) { $0 } ",
    "description": "RSpec Let"
  },
  "subject-let": {
    "prefix": "subject-let",
    "body": "subject(:${1:var}) { $2 } ",
    "description": "RSpec Subject-Let"
  },
  "fill-in": {
    "prefix": "fill-in",
    "body": "fill_in '${1:Field}', with: '${2:sometext}' ",
    "description": "RSpec Capybara fill_in with"
  },
  "describe": {
    "prefix": "describe",
    "body": [
      "describe '${1:a specification}' do",
      "\t$0",
      "end"
    ],
    "description": "RSpec Describe Block"
  },
  "expect": {
    "prefix": "expect",
    "body": "expect(${1:subject}).to $2 ",
    "description": "RSpec Expect"
  },
  "it-expect-inline": {
    "prefix": "it-expect-inline",
    "body": "it { expect { $1 }.to $2 } ",
    "description": "RSpec It Expect Inline"
  },
  "it-expect": {
    "prefix": "it-expect",
    "body": "it { expect { $1 }.to change($2, $3) } ",
    "description": "RSpec It Expect Change Inline"
  },
  "it-line": {
    "prefix": "it-line",
    "body": "it { $1 } ",
    "description": "RSpec It-Inline"
  },
  "pending": {
    "prefix": "pending",
    "body": [
      "pending '${1:a specification}' do",
      "\t$0",
      "end"
    ],
    "description": "RSpec Pending Block"
  },
  "should-have-button": {
    "prefix": "should-have-button",
    "body": "it { ${1:should} have_button('${2:Button Text}') } ",
    "description": "RSpec Should Have Button"
  },
  "should-have-filed": {
    "prefix": "should-have-filed",
    "body": "it { ${1:should} have_field('${2:selector}') } ",
    "description": "RSpec Should Have Field"
  },
  "should-have-link": {
    "prefix": "should-have-link",
    "body": "it { ${1:should} have_link('${2:Link Text}') } ",
    "description": "RSpec Should Have Link"
  },
  "allow-value": {
    "prefix": "allow-value",
    "body": "it { ${1:should} allow_value('${2:somevalue}').for(:${3:someattr}) } ",
    "description": "RSpec 'shoulda' allow_value"
  },
  "belong-to": {
    "prefix": "belong-to",
    "body": "it { ${1:should} belong_to(:${2:object}) } ",
    "description": "RSpec 'shoulda' belong_to"
  },
  "ensure-length-of": {
    "prefix": "ensure-length-of",
    "body": " it { ${1:should} ensure_length_of(:${2:attribute}).${3:is_at_most}(${4:50}) }",
    "description": "RSpec 'shoulda' ensure_length_of"
  },
  "have-many": {
    "prefix": "have-many",
    "body": "it { ${1:should} have_many(:${2:objects}) } ",
    "description": "RSpec 'shoulda' have_many"
  },
  "have-many-through": {
    "prefix": "have-many-through",
    "body": "it { ${1:should} have_many(:$2).through(:$3) } ",
    "description": "RSpec 'shoulda' have_many_through"
  },
  "validate-presense-of": {
    "prefix": "validate-presense-of",
    "body": "it { ${1:should} validate_presence_of(:${2:attribute}) }",
    "description": "RSpec 'shoulda' validate_presence_of"
  },
  "validate-uniqueness-of": {
    "prefix": "validate-uniqueness-of",
    "body": "it { ${1:should} validate_uniqueness_of(:${2:attribute}) }",
    "description": "RSpec 'shoulda' validate_uniqueness_of"
  },
  "should-have-selector": {
    "prefix": "should-have-selector",
    "body": "it { ${1:should} have_selector('${2:selector}'${3:, text: 'text'}) } ",
    "description": "RSpec Should Have Selector"
  },
  "should-respond-to": {
    "prefix": "should-respond-to",
    "body": "it { ${1:should} respond_to(:${2:method}) } ",
    "description": "RSpec Should Respond To"
  }
}
